"""This module contains functions that are useful for handling files generated by Spectran."""
from pathlib import Path
from . import ureg
import h5py
import pyqtgraph as pg 
from scipy.signal import periodogram

def load_file(file_path):
    """Load a file generated by Spectran.

    Parameters
    ----------
    file_path : str or Path
        The path to the file to load.

    Returns
    -------
    dict
        A dictionary containing the data and metadata of the file.
    """
    file_path = Path(file_path)
    if not file_path.exists():
        raise FileNotFoundError(f"File {file_path} not found")
    if file_path.suffix == ".h5" or file_path.suffix == ".hdf5":
        return load_hdf5(file_path)
    else:
        raise ValueError(f"File type {file_path.suffix} not supported yet")
    
def load_hdf5(file_path: str|Path):
    """Load a HDF5 file generated by Spectran.

    Parameters
    ----------
    file_path : str or Path
        The path to the file to load.

    Returns
    -------
    dict
        A dictionary containing the data and metadata of the file.
    """
    file_path = Path(file_path)
    with h5py.File(file_path, "r") as f:
        data = dict()
        for key in f.keys():
            data[key] = f[key][:]
        for key, val in f.attrs.items():
            data[key] = val
    return data


def get_psd(data):
    """Calculates mean of all PSDs in a data set.

    Args:
        data (dict): The data set to calculate the PSD from.

    Returns:
        np.ndarray: the mean PSD
    """
    if "psd" in data:
        return data["psd"]
    if "psds" not in data:
        data = calculate_psd(data)
    data["psd"] = data["psds"].mean(axis=0)
    return data["psd"]

def calculate_psd(data):
    """Calculates the PSD of a data set.

    Args:
        data (dict): The data set to calculate the PSD from.

    Returns:
        np.ndarray: the PSD
    """
    frequencies, psds = periodogram(data['voltage_data'], 
                                    fs=float(data["sample_rate"].split()[0]))
    
    data["frequencies"] = frequencies
    data["psds"] = psds
    return data

# def plot(x, y, plot=None, title=None, **kwargs):
#     """Plots the data x and y.

#     Args:
#         x (array): x values to plot
#         y (array): y values to plot
#         plot (_type_, optional): plot instance. Defaults to None.

#     Returns:
#         _type_: _description_
#     """

#     if plot is None:
#         plot = pg.plot(title=title)
    
#     plot.plot(x, y, **kwargs)    
    
#     return plot

# def plot_psd(data, plot=None, title="PSD", **kwargs):
#     """Plots the PSD of a data set.

#     Args:
#         data (dict): The data set to plot the PSD from.
#     """
#     if plot is None:
#         plot = pg.plot()
#     get_psd(data)
#     plot.plot(data["frequencies"][1:], 
#               data["psd"][1:], 
#                    title=title, 
#                    **kwargs
#                    )
#     # plot.setLogMode(x=True, y=True)
#     plot.showGrid(x=True, y=True)
#     plot.setLabel('bottom', 'Frequency', units='Hz')
#     plot.setLabel('left', 'Power Spectral Density', units='V/sqrt(Hz)]')
#     plot.getAxis("left").enableAutoSIPrefix(enable=False)
#     plot.getAxis("bottom").enableAutoSIPrefix(enable=False)
#     return plot
    
# def show():
#     pg.QtGui.QGuiApplication.instance().exec_()